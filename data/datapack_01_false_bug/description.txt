Tenemos dos commits que crean la chain mapping matrix de forma ligeramente diferente. Las diferencias de valor de la matriz son muy pequeños, excepto en dos valores (el. 64 vs 65 y el.31 vs el.32 que quedan a 0).

No es debido a diferencias entre serial y parallel (aunque forzar serial ayuda a comparar).

Interesa cambiar el output para poder comparar mejor:

En clusteringResultsGatherer.py:

		if(clustering_results is not None):
            results["best_clustering"] = clustering_results[0]
            results["selected"] = dict(sort_clustering_results(clustering_results[1]))
            results["not_selected"] = dict(sort_clustering_results(clustering_results[2]))
            results["scores"] = clustering_results[3]
por:
		if(clustering_results is not None):
            results["best_clustering"] = clustering_results[0]
            results["selected"] = sort_clustering_results(clustering_results[1])
            results["not_selected"] = sort_clustering_results(clustering_results[2])
            results["scores"] = clustering_results[3]

Estas diferencias provocan cambios en los resultados de los algoritmos, mínimos excepto en el caso del spectral. Los errores de clustering se descubren gracias al uso de silhouette que detecta dos elementos con distancia 0 en distintos clusters (siempre en clusterings producidos por Spectral, que por lo que se ve es el más sensible). Los unicos implicados son siempre 31, 32, 64 y 65, que son los valores con mayor diferencia (del orden de 1e-7). Siempre que existe el problema están en clusters diferentes, aunque no siempre son clusters de 1 solo elemento.

Inyectar la matriz de la revisión anterior a la última hace que los resultados coincidan (luego es 100% seguro debido a las diferencias de la matriz de distancias).

Uso script_map_2 y script_map_3_load_matrix para reproducir los cambios.

Pruebo con modelos 32 y 33 (elementos empiezan en 0).

Al parecer las diferencias se producen por el uso de la reordenación (getReorderedCoordinatesByLenGroups). Si se cambia:
for group_len in sorted(len_groups.keys()):
            for chid in len_groups[group_len]:
                        ----------------------
                if coordsets is None:
                    ...
por:
for group_len in sorted(len_groups.keys()):
            for chid in sorted(len_groups[group_len]):
                        ------------------------------
                if coordsets is None:
                    ...

Se evitan los cambios que hacen que ocurra el comportamiento anómalo. En realidad el comportamiento anómalo es correcto.


Obetner permutaciones:

============================
# @classmethod
#     def calcRMSDMatrix(cls, structure, calculator_type, in_chain_selection):
#         """
#
#         """
#         perm_file = open("permutations_head.txt","w")
#         chain_structures = cls.getStructureChains(structure, in_chain_selection)
#         chain_len_map = cls.getChainLengths(structure, in_chain_selection)
#         chain_len_groups = cls.getChainLenGroups(chain_len_map)
#         chain_coordsets = cls.getReorderedCoordinatesByLenGroups(structure, in_chain_selection, chain_len_groups)
#
#         perm_groups = cls.getPermGroups(chain_len_groups)
#         matrix_data = []
#         for i in range(len(chain_structures)-1):
#             chain_structure = chain_structures[i]
#             min_rmsd = None
#             for chain_perm in combopermutations(perm_groups):
#                 new_coords = cls.reorderCoordinates(chain_structure, chain_perm)
#                 calculator = pyRMSD.RMSDCalculator.RMSDCalculator(calculator_type,
#                                                                   numpy.concatenate([[new_coords], chain_coordsets[i+1:]]))
#                 rmsd = calculator.oneVsFollowing(0)
#                 perm_file.write(str(chain_perm)+" "+str(rmsd.tolist())+"\n")
#                 if min_rmsd is None:
#                     min_rmsd = rmsd
#                 else:
#                     min_rmsd = numpy.minimum(rmsd,min_rmsd)
# #                 print "structure:",i, "permutation:",chain_perm, "rmsd:", rmsd
# #             print "min rmsd", min_rmsd
#             matrix_data.extend(min_rmsd)
#         perm_file.close()
#         return pyRMSD.condensedMatrix.CondensedMatrix(matrix_data)
